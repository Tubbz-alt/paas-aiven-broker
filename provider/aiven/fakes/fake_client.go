// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/alphagov/paas-aiven-broker/provider/aiven"
)

type FakeClient struct {
	CreateServiceStub        func(params *aiven.CreateServiceInput) (string, error)
	createServiceMutex       sync.RWMutex
	createServiceArgsForCall []struct {
		params *aiven.CreateServiceInput
	}
	createServiceReturns struct {
		result1 string
		result2 error
	}
	createServiceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	GetServiceStatusStub        func(params *aiven.GetServiceStatusInput) (aiven.ServiceStatus, error)
	getServiceStatusMutex       sync.RWMutex
	getServiceStatusArgsForCall []struct {
		params *aiven.GetServiceStatusInput
	}
	getServiceStatusReturns struct {
		result1 aiven.ServiceStatus
		result2 error
	}
	getServiceStatusReturnsOnCall map[int]struct {
		result1 aiven.ServiceStatus
		result2 error
	}
	DeleteServiceStub        func(params *aiven.DeleteServiceInput) (string, error)
	deleteServiceMutex       sync.RWMutex
	deleteServiceArgsForCall []struct {
		params *aiven.DeleteServiceInput
	}
	deleteServiceReturns struct {
		result1 string
		result2 error
	}
	deleteServiceReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CreateService(params *aiven.CreateServiceInput) (string, error) {
	fake.createServiceMutex.Lock()
	ret, specificReturn := fake.createServiceReturnsOnCall[len(fake.createServiceArgsForCall)]
	fake.createServiceArgsForCall = append(fake.createServiceArgsForCall, struct {
		params *aiven.CreateServiceInput
	}{params})
	fake.recordInvocation("CreateService", []interface{}{params})
	fake.createServiceMutex.Unlock()
	if fake.CreateServiceStub != nil {
		return fake.CreateServiceStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.createServiceReturns.result1, fake.createServiceReturns.result2
}

func (fake *FakeClient) CreateServiceCallCount() int {
	fake.createServiceMutex.RLock()
	defer fake.createServiceMutex.RUnlock()
	return len(fake.createServiceArgsForCall)
}

func (fake *FakeClient) CreateServiceArgsForCall(i int) *aiven.CreateServiceInput {
	fake.createServiceMutex.RLock()
	defer fake.createServiceMutex.RUnlock()
	return fake.createServiceArgsForCall[i].params
}

func (fake *FakeClient) CreateServiceReturns(result1 string, result2 error) {
	fake.CreateServiceStub = nil
	fake.createServiceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CreateServiceReturnsOnCall(i int, result1 string, result2 error) {
	fake.CreateServiceStub = nil
	if fake.createServiceReturnsOnCall == nil {
		fake.createServiceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.createServiceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceStatus(params *aiven.GetServiceStatusInput) (aiven.ServiceStatus, error) {
	fake.getServiceStatusMutex.Lock()
	ret, specificReturn := fake.getServiceStatusReturnsOnCall[len(fake.getServiceStatusArgsForCall)]
	fake.getServiceStatusArgsForCall = append(fake.getServiceStatusArgsForCall, struct {
		params *aiven.GetServiceStatusInput
	}{params})
	fake.recordInvocation("GetServiceStatus", []interface{}{params})
	fake.getServiceStatusMutex.Unlock()
	if fake.GetServiceStatusStub != nil {
		return fake.GetServiceStatusStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServiceStatusReturns.result1, fake.getServiceStatusReturns.result2
}

func (fake *FakeClient) GetServiceStatusCallCount() int {
	fake.getServiceStatusMutex.RLock()
	defer fake.getServiceStatusMutex.RUnlock()
	return len(fake.getServiceStatusArgsForCall)
}

func (fake *FakeClient) GetServiceStatusArgsForCall(i int) *aiven.GetServiceStatusInput {
	fake.getServiceStatusMutex.RLock()
	defer fake.getServiceStatusMutex.RUnlock()
	return fake.getServiceStatusArgsForCall[i].params
}

func (fake *FakeClient) GetServiceStatusReturns(result1 aiven.ServiceStatus, result2 error) {
	fake.GetServiceStatusStub = nil
	fake.getServiceStatusReturns = struct {
		result1 aiven.ServiceStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) GetServiceStatusReturnsOnCall(i int, result1 aiven.ServiceStatus, result2 error) {
	fake.GetServiceStatusStub = nil
	if fake.getServiceStatusReturnsOnCall == nil {
		fake.getServiceStatusReturnsOnCall = make(map[int]struct {
			result1 aiven.ServiceStatus
			result2 error
		})
	}
	fake.getServiceStatusReturnsOnCall[i] = struct {
		result1 aiven.ServiceStatus
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteService(params *aiven.DeleteServiceInput) (string, error) {
	fake.deleteServiceMutex.Lock()
	ret, specificReturn := fake.deleteServiceReturnsOnCall[len(fake.deleteServiceArgsForCall)]
	fake.deleteServiceArgsForCall = append(fake.deleteServiceArgsForCall, struct {
		params *aiven.DeleteServiceInput
	}{params})
	fake.recordInvocation("DeleteService", []interface{}{params})
	fake.deleteServiceMutex.Unlock()
	if fake.DeleteServiceStub != nil {
		return fake.DeleteServiceStub(params)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteServiceReturns.result1, fake.deleteServiceReturns.result2
}

func (fake *FakeClient) DeleteServiceCallCount() int {
	fake.deleteServiceMutex.RLock()
	defer fake.deleteServiceMutex.RUnlock()
	return len(fake.deleteServiceArgsForCall)
}

func (fake *FakeClient) DeleteServiceArgsForCall(i int) *aiven.DeleteServiceInput {
	fake.deleteServiceMutex.RLock()
	defer fake.deleteServiceMutex.RUnlock()
	return fake.deleteServiceArgsForCall[i].params
}

func (fake *FakeClient) DeleteServiceReturns(result1 string, result2 error) {
	fake.DeleteServiceStub = nil
	fake.deleteServiceReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) DeleteServiceReturnsOnCall(i int, result1 string, result2 error) {
	fake.DeleteServiceStub = nil
	if fake.deleteServiceReturnsOnCall == nil {
		fake.deleteServiceReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.deleteServiceReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.createServiceMutex.RLock()
	defer fake.createServiceMutex.RUnlock()
	fake.getServiceStatusMutex.RLock()
	defer fake.getServiceStatusMutex.RUnlock()
	fake.deleteServiceMutex.RLock()
	defer fake.deleteServiceMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ aiven.Client = new(FakeClient)
